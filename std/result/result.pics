
import std.sys
import std.option 

// Module: Result
// Provides a standard way to represent success (`ok`) or failure (`err`) outcomes.
// Inspired by Rust's Result type, this allows safe and composable error handling.
Result :: module {

  // Function: ok
  // Wraps a value in an `ok` result
  //
  // Parameters:
  //   value - The success value
  //
  // Returns:
  //   A Result tagged as `ok`
  ok :: (value) = {tag: "ok", value: value}


  // Function: err
  // Wraps an error message in an `err` result
  //
  // Parameters:
  //   msg - The error message string
  //
  // Returns:
  //   A Result tagged as `err`
  err :: (msg) = {tag: "err", message: msg}


  // Function: unwrap
  // Extracts the value if the result is `ok`, otherwise panics with the error message
  //
  // Parameters:
  //   result - The Result to unwrap
  //
  // Returns:
  //   The contained value if `ok`
  //
  // Panics:
  //   If the result is `err`, panics with its error message
  unwrap :: (result) = 
    when result {
      is {tag: "ok", value: value} -> value
      is {tag: "err", message: msg} -> System::panic(msg)
      else -> System::panic("Failed to match case")
    }


  // Function: unwrapOr
  // Returns the value if `ok`, or a fallback value if `err`
  //
  // Parameters:
  //   result - The Result to unwrap
  //   or - The fallback value to use if result is `err`
  //
  // Returns:
  //   The value if `ok`, otherwise `or`
  unwrapOr :: (result, or) = 
    when result {
      is {tag: "ok", value: value} -> value
      else -> or
    }


  // Function: unwrapOrElse
  // Returns the value if `ok`, or calls a to compute a fallback from the error
  //
  // Parameters:
  //   result - The Result to unwrap
  //   fx - A to call with the `err` value if present
  //
  // Returns:
  //   The value if `ok`, otherwise the result of `fx(result)`
  unwrapOrElse :: (result, fx) = 
    when result {
      is {tag: "ok", value: value} -> value
      else -> fx(result)
    }


  // Function: isOk
  // Checks if the Result is `ok`
  //
  // Parameters:
  //   result - The Result to check
  //
  // Returns:
  //   true if the result is `ok`, false otherwise
  isOk :: (result) = 
    when result {
      is {tag: "ok", value: _} -> true
      else -> false
    }


  // Function: isErr
  // Checks if the Result is `err`
  //
  // Parameters:
  //   result - The Result to check
  //
  // Returns:
  //   true if the result is `err`, false otherwise
  isErr :: (result) = 
    when result {
      is {tag: "ok", value: _} -> false
      else -> true
    }


  // Function: map
  // Applies a to the value if it's `ok`; passes through `err` unchanged
  //
  // Parameters:
  //   result - The Result to map
  //   fx - A to transform the `ok` value
  //
  // Returns:
  //   A new Result with the transformed value or the original `err`
  map :: (result, fx) = 
    when result {
      is {tag: "ok", value: v} -> Result.ok(fx(v))
      else -> result
    }


  // Function: mapErr
  // Applies a to the error message if it's `err`; passes through `ok` unchanged
  //
  // Parameters:
  //   result - The Result to map
  //   fx - A to transform the error message
  //
  // Returns:
  //   A new Result with the transformed error or the original `ok`
  mapErr :: (result, fx) = 
    when result {
      is {tag: "err", message: msg} -> Result::err(fx(msg))
      else -> result
    }


  // Function: flatMap
  // Applies a that returns a Result, flattening the output
  //
  // Parameters:
  //   result - The Result to transform
  //   fx - A that returns another Result
  //
  // Returns:
  //   The output of `fx` if input was `ok`, or the original `err`
  flatMap :: (result, fx) = 
    when result {
      is {tag: "ok", value: v} -> fx(v)
      else -> result
    }


  // Function: match
  // Pattern-matches on a Result and applies different functions to `ok` and `err`
  //
  // Parameters:
  //   result - The Result to match
  //   okFx - Function to apply to the `ok` value
  //   errFx - Function to apply to the error message
  //
  // Returns:
  //   The result of calling the appropriate function
  match :: (result, okFx, errFx) =
    when result {
      is {tag: "ok", value: v} -> okFx(v)
      is {tag: "err", message: msg} -> errFx(msg)
    }


  // Function: toOption
  // Converts a Result into an Option
  //
  // Parameters:
  //   result - The Result to convert
  //
  // Returns:
  //   Option.some(value) if `ok`, Option.none() if `err`
  toOption :: (result) =
    when result {
      is {tag: "ok", value: v} -> Option.some(v)
      else -> Option.none()
    }


  // Function: toString
  // Converts a Result to a human-readable string representation
  //
  // Parameters:
  //   result - The Result to stringify
  //
  // Returns:
  //   A string like "Result.ok(value)" or "Result.err(message)"
  toString :: (result) =
    when result {
      is {tag: "ok", value: v} -> "Result.ok(" + v + ")"
      is {tag: "err", message: msg} -> "Result.err(" + msg + ")"
    }

}



// Module: List
// Common array operations including transformation, combination, and querying
List :: module {

  // Function: concat
  // Combines two arrays into a single array
  //
  // Parameters:
  //   a - The first array
  //   b - The second array
  //
  // Returns:
  //   A new array consisting of all elements of `a` followed by all elements of `b`
  concat :: (a=[], b=[]) =
    when a {
      is [] -> b
      is x:rest -> x : concat(rest, b)
    }

  // Function: toString
  // Converts an array into its string representation
  //
  // Parameters:
  //   arr - The array to convert
  //
  // Returns:
  //   A string representation of the array
  #[Deprecated]
  toString :: (arr=[]) = pic_nat_array_tostring(arr)

  // Function: join
  // Concatenates elements into a string, separated by a given separator
  //
  // Parameters:
  //   xs - The array of strings
  //   sep - The separator string (default: ",")
  //
  // Returns:
  //   A string of array elements joined by the separator
  join :: (xs=[], sep=",") =
    when xs {
      is [] -> ""
      is [x] -> x
      is x:rest -> x + sep + join(rest, sep)
    }

  // Function: zip
  // Combines two arrays into a single array of pairs
  //
  // Parameters:
  //   xs - The first array
  //   ys - The second array
  //
  // Returns:
  //   An array of [x, y] pairs from corresponding elements of `xs` and `ys`
  zip :: (xs=[], ys=[]) =
    when [xs, ys] {
      is [[], _] -> []
      is [_, []] -> []
      is [x:xs1, y:ys1] -> [ [x, y] ] : zip(xs1, ys1)
    }

  // Function: map
  // Applies a to every element in the array
  //
  // Parameters:
  //   xs - The array to transform
  //   f - The to apply to each element
  //
  // Returns:
  //   A new array with transformed values
  map :: (xs=[], f) =
    when xs {
      is [] -> []
      is x:rest -> f(x) : map(rest, f)
    }

  // Function: filter
  // Selects elements based on a predicate
  //
  // Parameters:
  //   xs - The array to filter
  //   pred - A predicate returning true or false
  //
  // Returns:
  //   A new array containing elements for which `pred` returns true
  filter :: (xs=[], pred) =
    when xs {
      is [] -> []
      is x:rest ->
        if pred(x) do {
          x : filter(rest, pred)
        } else do {
          filter(rest, pred)
        }
    }

  // Function: reduce
  // Reduces the array to a single value using an accumulator function
  //
  // Parameters:
  //   xs - The array to reduce
  //   f - The reducer (accumulator, element) => result
  //   acc - The initial accumulator value
  //
  // Returns:
  //   The final reduced value
  reduce :: (xs=[], f, acc) =
    when xs {
      is [] -> acc
      is x:rest -> reduce(rest, f, f(acc, x))
    }

  // Function: length
  // Gets the number of elements in the array
  //
  // Parameters:
  //   xs - The array
  //
  // Returns:
  //   The length of the array
  length :: (xs=[]) = xs.len

  // Function: reverse
  // Reverses the array
  //
  // Parameters:
  //   xs - The array to reverse
  //
  // Returns:
  //   A new array with elements in reverse order
  reverse :: (xs=[]) =
    List::reduce(xs, |acc, x| -> x : acc, [])

  // Function: flatMap
  // Maps a over an array and flattens the result
  //
  // Parameters:
  //   xs - The array to map over
  //   f - A returning an array for each element
  //
  // Returns:
  //   A flat array of concatenated results
  flatMap :: (xs=[], f) =
    List::reduce(xs, |acc, x| -> List::concat(acc, f(x)), [])

  // Function: take
  // Takes the first N elements from the array
  //
  // Parameters:
  //   xs - The source array
  //   n - The number of elements to take
  //
  // Returns:
  //   A new array with at most N elements
  take :: (xs=[], n=0) =
    if n <= 0 do {
      []
    } else when xs {
        is [] -> []
        is x:rest -> x : take(rest, n - 1)
      }


  // Function: drop
  // Drops the first N elements from the array
  //
  // Parameters:
  //   xs - The source array
  //   n - The number of elements to drop
  //
  // Returns:
  //   A new array without the first N elements
  drop :: (xs=[], n=0) =
    if n <= 0 do {
      xs
    } else when xs {
      is [] -> []
      is _:rest -> drop(rest, n - 1)
    }

  // Function: contains
  // Checks whether the array contains a specific value
  //
  // Parameters:
  //   xs - The array to search
  //   value - The value to find
  //
  // Returns:
  //   True if the value exists in the array, otherwise false
  contains :: (xs=[], value) =
    when xs {
      is [] -> false
      is x:rest -> if x == value do { true } else do { contains(rest, value) }
    }

  // Function: indexOf
  // Returns the index of a value in the array
  //
  // Parameters:
  //   xs - The array to search
  //   value - The value to look for
  //   i - (Internal) the current index, used recursively
  //
  // Returns:
  //   The index of the value or -1 if not found
  indexOf :: (xs=[], value, i=0) =
    when xs {
      is [] -> -1
      is x:rest -> if x == value do { i } else do { indexOf(rest, value, i + 1) }
    }

  // Function: fromRange
  // Generates an array of numbers from `start` to `end` inclusive
  //
  // Parameters:
  //   start - The starting number
  //   end - The ending number
  //
  // Returns:
  //   An array representing the range [start, ..., end]
  fromRange :: (start, end) = 
    if start == end do {
      [end]
    } else if start < end do {
      start : fromRange(start + 1, end)
    } else do {
      start : fromRange(start - 1, end)
    }
}


import std.unit

import std.sys

// Module: Iterators
// Provides generic iteration utilities for traversing and executing functions over collections
Iterators :: module {

  // Function: forEach
  // Executes a side-effecting function on each element of the array
  //
  // Parameters:
  //   array - The array to iterate over
  //   fx - A function to call for each element in the array
  //
  // Returns:
  //   Unit.UNIT - Represents the absence of a meaningful return value
  //
  // Notes:
  //   This function is intended for cases where `fx` performs side effects,
  //   like printing, logging, or mutating external state.
  forEach :: (array=[], fx) = 
    when array {
      is [] -> Unit::UNIT
      is [x] -> do {
        fx(x)
        Unit::UNIT
      }
      is h:t -> do {
        fx(h)
        forEach(t, fx)
      }
    }

    forever :: (fx) = System::todo("TODO")
}


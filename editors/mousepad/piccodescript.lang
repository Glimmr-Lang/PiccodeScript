<?xml version="1.0" encoding="UTF-8"?>
<language id="piccodescript" name="Piccodescript" version="2.0" _section="Script">
  <metadata>
    <property name="mimetypes">text/x-piccodescript</property>
    <property name="globs">*.pics</property>
    <property name="line-comment-start">//</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
    <property name="suggested-suffix">.pics</property>
  </metadata>

  <styles>
    <style id="comment"           name="Comment"                   map-to="def:comment"/>
    <style id="escaped-character" name="Escaped Character"         map-to="def:special-char"/>
    <style id="multiline-string"  name="Multiline string"      map-to="def:string"/>
    <style id="string"            name="String"                    map-to="def:string"/>
    <style id="keyword"           name="Keyword"                   map-to="def:keyword"/>
    <style id="boolean"           name="Boolean value"             map-to="def:boolean"/>
    <style id="floating-point"    name="Floating-point number"     map-to="def:floating-point"/>
    <style id="decimal"           name="Decimal number"            map-to="def:decimal"/>
    <style id="base-n-integer"    name="Base-N number"             map-to="def:base-n-integer"/>
    <style id="type"              name="Data Type"                 map-to="def:type"/>
  </styles>

  <definitions>

    <define-regex id="escaped-character" extended="true">
      \\(                  # leading backslash
        [\\\"\'nrbtfs] |   # escaped character
        [0-7]{1,3}     |   # latin encoded char
        u+[0-9a-fA-F]{4}   # unicode char
      )
    </define-regex>

    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
      </include>
    </context>

    <context id="multiline-string" style-ref="multiline-string" class="string" class-disabled="no-spell-check">
      <start>"""\s*$</start>
      <end>"""</end>
      <include>
        <context style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
      </include>
    </context>

    <context id="flow" style-ref="keyword">
      <keyword>import</keyword>
      <keyword>module</keyword>
      <keyword>when</keyword>
      <keyword>is</keyword>
      <keyword>if</keyword>
      <keyword>else</keyword>
      <keyword>do</keyword>
      <keyword>catch</keyword>
      <keyword>use</keyword>
      <keyword>let</keyword>
      <keyword>in</keyword>
    </context>

    <context id="boolean" style-ref="boolean">
      <keyword>false</keyword>
      <keyword>true</keyword>
    </context>

    <context id="floating-point" style-ref="floating-point">
      <match extended="true" case-sensitive="false">
        \b(
          \d+[fd] |
          ((\d*\.\d+|\d+\.)(e[-+]?\d+)? |
            \d+e[-+]?\d+)[fd]?
        )
      </match>
    </context>
    <context id="base-n-integer" style-ref="base-n-integer">
      <match case-sensitive="false">\b(0x[\da-f]+|0[0-7]+)l?</match>
    </context>
    <context id="decimal" style-ref="decimal">
      <match case-sensitive="false">\b([1-9]\d*|0)l?</match>
    </context>

    <context id="piccodescript" class="no-spell-check">
      <include>
        <context ref="multiline-string"/>
        <context ref="string"/>
        <context ref="flow"/>
        <context ref="boolean"/>
        <context ref="floating-point"/>
        <context ref="base-n-integer"/>
        <context ref="decimal"/>
      </include>
    </context>

  </definitions>
</language>
